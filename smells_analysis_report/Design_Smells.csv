Project Name,Package Name,Type Name,Design Smell,Cause of the Smell,Status,Justification
backend,secretstuffs.application.services,VerificationTokenService,Feature Envy,The tool detected a instance of this smell because verifyToken is more interested in members of the type: JwtHelper,Solved,
backend,secretstuffs.controllers,DonationController,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),Solved,
backend,secretstuffs.controllers,ItemPostController,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),Solved,
backend,secretstuffs.controllers,AuthController,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),Solved,
backend,secretstuffs.controllers,UserController,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),Solved,
backend,secretstuffs,ApiApplication,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),False Positive ,"The “Unutilized Abstraction” smell is a false positive in this scenario because the ApiApplication class serves its intended purpose as a Spring Boot application entry point. Adding documentation, simple initialization logic, or suppressing the warning are all valid ways to address or bypass this issue without changing the application’s design."
backend,secretstuffs.application.exception,GlobalExceptionHandler,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),Solved,
backend,secretstuffs.domain.configurations,ModelMapperConfig,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),False Positive ,"The ModelMapperConfig class is a critical part of the application’s configuration, as it defines a ModelMapper bean required for Spring’s dependency injection. While it may not have explicit references in the codebase, it is implicitly utilized by various services and controllers for mapping objects, which is a standard practice in Spring-based applications. This usage pattern justifies its existence and marks the issue as a false positive."
backend,secretstuffs.domain.configurations,WebConfig,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),False Positive ,"The WebConfig class is essential for configuring web-related settings such as CORS mappings or interceptors in a Spring-based application. While it may not have explicit references, it is implicitly utilized by the Spring framework to manage global web configurations. This standard usage in Spring applications justifies its existence, making the issue a false positive."
backend,secretstuffs.domain.configurations,WebSocketConfig,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),False Positive ,"The WebSocketConfig class is crucial for enabling and configuring WebSocket communication in the application. It is used implicitly by the Spring framework to establish WebSocket endpoints and manage communication protocols. This configuration is a standard practice in WebSocket-enabled applications, and its presence is justified, marking the issue as a false positive."
backend,secretstuffs.domain.enums,DonationEnum,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,False Positive ,"The DonationEnum is a necessary abstraction as it provides a clear, type-safe representation of the possible states of a donation (PENDING, ACCEPTED, REJECTED). It enhances code readability, ensures maintainability, and reduces the risk of invalid states. While it currently contains only a few values, its use is justified for potential future extensibility and adherence to best practices in state management, marking the issue as a false positive."
backend,secretstuffs.domain.enums,ItemPostStatusEnum,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,False Positive ,"The detection of “Unnecessary Abstraction” for the ItemPostStatusEnum is a false positive because the enum encapsulates a defined set of constants (ACTIVE, INACTIVE, DONATED) that represent the specific statuses of an item post. Enums inherently serve as a type-safe way to represent fixed values, making this abstraction both necessary and meaningful in the context of the application."
backend,secretstuffs.domain.enums,ConditionEnum,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,False Positive ,"The ConditionEnum is a necessary abstraction as it provides a clear and type-safe representation of item conditions (NEW, LIKE_NEW, GOOD, FAIR, POOR, DAMAGED). It ensures consistency in handling item condition states across the application, improves code readability, and prevents invalid values. While it may currently seem straightforward, it is essential for maintainability, future extensibility, and adherence to best practices, marking the issue as a false positive."
backend,secretstuffs.domain.enums,CategoryEnum,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,False Positive ,"The CategoryEnum is a necessary abstraction as it provides a type-safe and consistent representation of predefined item categories (FURNITURE, ELECTRONICS, BOOKS, etc.) used across the application. This enum ensures clarity, prevents invalid category values, and enhances code readability. While it may appear straightforward, it plays a critical role in maintaining consistency, supporting future extensibility, and adhering to best practices for category management in the application, marking the issue as a false positive."
backend,secretstuffs.domain.dtos.exception,UserException,Broken Hierarchy,The tool detected a potential instance of the smell because this type does not implement or override any method from it's supertype(s): BusinessException,False Positive ,"The detection of “Broken Hierarchy” in the UserException class is a false positive because the class likely extends BusinessException to provide a more specific type of exception, which is a common design pattern. Even if it doesn’t override any methods, it allows for semantic differentiation and type-safe handling of user-related exceptions. This hierarchical structure enhances code readability and maintainability, and adding overridden methods unnecessarily would violate the principle of simplicity in exception handling."
backend,secretstuffs.domain.models.responses,ErrorResponseDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.responses,ErrorResponseDTO,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: status; message; errorCode; timestamp; errors,Solved,
backend,secretstuffs.domain.models.responses.auth,LoginUserResponseDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.responses.auth,RegisterUserResponseDTO,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: token; tokenType; expiresAt; email; profileImageURL; active,Solved,
backend,secretstuffs.domain.models.responses.user,UpdateUserResponseDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.responses.user,DeleteUserResponseDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.responses.user,DeleteUserResponseDTO,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),Solved,
backend,secretstuffs.domain.models.responses.user,FetchUserProfileResponseDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.responses.user,FetchUserProfileResponseDTO,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: email; profileImageURL; active; firstName; lastName,Solved,
backend,secretstuffs.domain.models.responses.user,ChangePasswordResponseDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.responses.user,ChangePasswordResponseDTO,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),Solved,
backend,secretstuffs.domain.models.responses.itemPost,FetchItemPostResponseDTO,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: id; email; title; address; description; condition; itemPostImageUrl; category,Solved,
backend,secretstuffs.domain.models.responses.itemPost,CreateItemPostResponseDTO,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: email; title; address; description; condition; itemPostImageUrl; category,Solved,
backend,secretstuffs.domain.models.requests.donation,CreateDonationRequestDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.requests.auth,LoginUserRequestDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.requests.auth,RegisterUserRequestDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.requests.auth,RegisterUserRequestDTO,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: firstName; lastName; email; password; profileImageURL,Solved,
backend,secretstuffs.domain.models.requests.user,UpdateUserRequestDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.requests.user,ChangePasswordRequestDTO,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.models.requests.itemPost,CreateItemPostRequestDTO,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: email; title; address; description; itemPostImageUrl; condition; category,Solved,
backend,secretstuffs.domain.dtos.commands.chat,ChatNotification,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.dtos.commands.chat,ChatNotification,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),Solved,
backend,secretstuffs.domain.dtos.commands.auth,LoginUserCommand,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.dtos.commands.auth,RegisterUserCommand,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.dtos.commands.auth,RegisterUserCommand,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: firstName; lastName; email; password; profileImageURL,Solved,
backend,secretstuffs.domain.dtos.commands.user,UpdateUserDetailsCommand,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.dtos.commands.user,ChangePasswordCommand,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.dtos.commands.user,FetchUserDetailsCommand,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.dtos.commands.user,DeleteUserCommand,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.dtos.commands.itemPost,CreateItemPostCommand,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: email; title; address; Description; condition; itemPostUrl; category,Solved,
backend,secretstuffs.domain.dtos.commands.itemPost,FetchPostsByUserCommand,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.dtos.commands.itemPost,DeleteItemPostCommand,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.dtos.commands.itemPost,UpdateItemPostCommand,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),Solved,
backend,secretstuffs.domain.dtos.commands.itemPost,UpdateItemPostCommand,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: id; title; description; address; itemPostUrl; category; condition,Solved,
backend,secretstuffs.domain.dtos.exception,BusinessException,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.validation,EnumValidatorImpl,Unutilized Abstraction,The tool detected the smell in this class because this class is potentially unused. (Please ignore the smell if the reported class is auto-generated and/or used to serve a specific known purpose.),False Positive ,"The “Unutilized Abstraction” smell for the EnumValidatorImpl class is a false positive because it serves a specific purpose in validating string values against enum constants. It is used indirectly via the @EnumValidator annotation to ensure data integrity and enforce validation rules across the application. The class aligns with best practices by modularizing validation logic, making it reusable and maintainable."
backend,secretstuffs.domain.entities,Donation,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: id; createdAt; updatedAt; status; user; itemPost,Solved,
backend,secretstuffs.domain.entities,ChatRoom,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.entities,VerificationToken,Unnecessary Abstraction,The tool detected the smell in this class because the class contains only a few data members without any method implementation,Solved,
backend,secretstuffs.domain.entities,ChatMessage,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: id; chatId; senderId; recipientId; content; timestamp,Solved,
backend,secretstuffs.domain.entities,Donation,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: id; createdAt; updatedAt; status; user; itemPost,False Positive ,"The detection of “Broken Modularization” in the Donation class is a false positive because the class is designed as a domain entity to represent the donations table in the database. Its primary purpose is to encapsulate data and define relationships using JPA annotations while enforcing constraints. Adding methods without necessity would violate the Single Responsibility Principle (SRP), as business logic and behavior are intended to reside in service layers. The class adheres to standard domain-driven design practices, keeping entities focused on their core responsibility of data representation."
backend,secretstuffs.domain.entities,ItemPost,Broken Modularization,The tool detected the smell in this class because it contains only data members without any method implementation. Following fields are declared in this class: id; email; title; address; description; category; itemPostImageUrl; condition,False Positive ,"The detection of “Broken Modularization” in the ItemPost class is a false positive because it is designed as a domain entity with the primary responsibility of representing database data using JPA annotations. Its minimal behavior is intentional, adhering to the Single Responsibility Principle (SRP), while Lombok-generated methods handle functionality like getters, setters, and constructors. Adding methods unnecessarily would violate the separation of concerns and overcomplicate the entity’s purpose."